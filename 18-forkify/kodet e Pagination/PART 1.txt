`````````````````````````````````````````` controller.js ``````````````````````````````````````

import * as model from './model.js';
import recipeView from './views/recipeView.js';
import searchView from './views/searchView.js';
import resultsView from './views/resultsView.js';

import 'core-js/stable';
import 'regenerator-runtime/runtime';

// if (module.hot) {
//   module.hot.accept();
// }
// console.log(icons); // e shikon ne console url dhe shiko nese korrespondon me emrin te file dist

// do kopjojme linkun qe morem te forkify-api te metodes GET dhe krijojme nje funksion async qe do e perdortin ne single wait . Ne dime qe fetch do return nje promise
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1); // window.location kthen location e objektit me informacion rreth location te sakte te dokumentit ndersa location.hash qe do te thote ikona "#" para id
    // console.log(id);

    if (!id) return;
    recipeView.renderSpinner(); // nuk na nevojitet me parent element qe ne kete rast ishte recipeContainer

    //1. lOADING RECIPE
    await model.loadRecipe(id);
    // const { recipe } = model.state; nuk na duhet me

    //2. RENDERING RECIPE
    recipeView.render(model.state.recipe);
  } catch (err) {
    console.log(err);
    recipeView.renderError();
  }
};

/* do dergohet te recipeView.js
['hashchange', 'load'].forEach(ev =>
  window.addEventListener(ev, controlRecipes)
);
*/

const controlSearchResults = async function () {
  try {
    resultsView.renderSpinner();
    //1. GET SEARCH QUERY
    const query = searchView.getQuery();
    if (!query) return;

    //2. LOAD SEARCH RESULTS
    await model.loadSearchResults(query);

    //3. RENDER RESULTS
    // resultsView.render(model.state.search.results);
    resultsView.render(model.getSearchResultsPage());
  } catch (err) {
    console.log(err);
  }
};

const init = function () {
  recipeView.addHandlerRender(controlRecipes);
  searchView.addHandlerSearch(controlSearchResults);
};
init();

// eventi hashchange do te aktoivizohet # kur te ndryshojme url
// controlRecipes();
//ne kemi nje array ne te cilen cdo element do permbaje this markup
// window.addEventListener('hashchange', controlRecipes);
// window.addEventListener('load', controlRecipes);



````````````````````````````````````````````model.js```````````````````````````````````````````

import { async } from 'regenerator-runtime';
import { API_URL, RES_PER_PAGE } from './config.js';
import { getJSON } from './helpers.js';

export const state = {
  recipe: {},
  search: {
    query: '', //kijuam nje objekt ku do niset me empty string
    results: [], // dhe rezult me empty array
    page: 1,
    resultsPerPage: RES_PER_PAGE,
  },
};

export const loadRecipe = async function (id) {
  try {
    const data = await getJSON(`${API_URL}/${id}`);

    const { recipe } = data.data;
    state.recipe = {
      id: recipe.id,
      title: recipe.title,
      publisher: recipe.publisher,
      source_url: recipe.source_url,
      image_url: recipe.image_url,
      servings: recipe.servings,
      cooking_time: recipe.cooking_time,
      ingredients: recipe.ingredients,
    };
    console.log(state.recipe);
  } catch (err) {
    //TEMP ERROR HANDLING
    console.error(err);
    throw err;
  }
};

//krijimi i funksionit
export const loadSearchResults = async function (query) {
  try {
    state.search.query = query;
    // const data = await getJSON(`https://forkify-api.herokuapp.com/api/v2/recipes?search=pizza`)
    const data = await getJSON(`${API_URL}?search=${query}`);
    console.log(data); // do dali statusi success

    state.search.results = data.data.recipes.map(rec => {
      return {
        id: rec.id,
        title: rec.title,
        publisher: rec.publisher,
        image_url: rec.image_url,
      };
    });
    // console.log(state.search.results);
  } catch (err) {
    console.error(err);
    throw err;
  }
};
// loadSearchResults('pizza'); do thirret te controller

export const getSearchResultsPage = function (page = state.search.page) {
  state.search.page = page;
  const start = (page - 1) * state.search.resultsPerPage;
  const end = page * state.search.resultsPerPage;
  console.log(start, end);
  return state.search.results.slice(start, end);
};




````````````````````````````````````````````````` config.js`````````````````````````````````````

export const API_URL = 'https://forkify-api.herokuapp.com/api/v2/recipes';
export const TIMEOUT_SEC = 10;
export const RES_PER_PAGE = 10;
